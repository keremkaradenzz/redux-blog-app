{"version":3,"sources":["features/posts/PostAuthor.jsx","features/posts/TimeAgo.jsx","api/client.js","features/posts/postsSlice.js","features/posts/ReactionButtons.jsx","features/posts/PostsList.jsx","features/posts/AddPostForm.jsx","features/notifications/notificationsSlice.js","app/Navbar.js","features/posts/SinglePostPage.jsx","features/posts/EditPostForm.jsx","features/users/usersSlice.js","features/users/UserPage.jsx","features/users/UsersList.jsx","features/notifications/NotificationsList.jsx","App.js","api/server.js","app/store.js","index.js"],"names":["PostAuthor","userId","author","useSelector","state","users","find","user","id","name","TimeAgo","timestamp","timeAgo","date","parseISO","timePeriod","formatDistanceToNow","title","client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","fetchPosts","createAsyncThunk","posts","addNewPost","initialPost","postsSlice","createSlice","initialState","status","error","reducers","postUpdated","action","payload","content","existingPost","reactionAdded","postId","reaction","reactions","extraReducers","pending","fulfilled","concat","rejected","push","actions","postAdded","selectAllPosts","selectPostById","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","dispatch","useDispatch","reactionButtons","Object","entries","map","emoji","key","type","className","onClick","PostsList","orderedPosts","slice","sort","b","localeCompare","postStatus","useEffect","item","substring","to","AddPostForm","useState","setTitle","setContent","setUserId","addRequestStatus","setAddRequestStatus","canSave","every","Boolean","onSavePostClicked","resultAction","unwrapResult","console","usersOptions","value","htmlFor","onChange","e","target","disabled","fetchNotifications","_","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","notifications","notificationsSlice","allNotificationsRead","forEach","notification","read","isNew","Navbar","unreadNotificationsBadge","numUnreadNotifications","filter","n","length","SinglePostPage","match","params","EditPostForm","history","useHistory","placeholder","fetchUsers","usersSlice","selectAllUsers","UserPage","selectUserById","postTitles","UsersList","renderedUsers","NotificationsList","renderedNotifications","notificationClassname","classnames","new","App","seedDate","exact","path","render","component","configureStore","reducer","postsReducer","usersReducer","notificationsReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","notificationTemplates","Server","routes","this","namespace","timing","resource","server","schema","req","normalizedRequestAttrs","create","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","Array","db","template","nanoid","between","models","Model","hasMany","belongsTo","comment","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","association","past","text","paragraph","serializers","seeds","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.220538e8.chunk.js","sourcesContent":["import React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const PostAuthor = ({ userId }) => {\n  const author = useSelector((state) =>\n    state.users.find((user) => user.id === userId)\n  )\n\n  return <span>by {author ? author.name : 'Unknown author'}</span>\n}\n","import React from 'react'\nimport { parseISO, formatDistanceToNow } from 'date-fns'\n\n\nexport const TimeAgo = ({ timestamp }) => {\n    let timeAgo = ''\n    if (timestamp) {\n      const date = parseISO(timestamp)\n      const timePeriod = formatDistanceToNow(date)\n      timeAgo = `${timePeriod} ago`\n    }\n  \n    return (\n      <span title={timestamp}>\n        &nbsp; <i>{timeAgo}</i>\n      </span>\n    )\n  }","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}\n","import { createAsyncThunk, createSlice, nanoid } from '@reduxjs/toolkit';\n\nimport {client} from '../../api/client';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error:null,\n}\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts' , async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.posts\n})\nexport const addNewPost = createAsyncThunk('posts/addNewPosts' , async (initialPost) => {\n  const response = await client.post('/fakeApi/posts', { post: initialPost})\n  return response.post;\n})\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // postAdded: {\n    //   reducer: (state, action) => {\n    //     state.posts.push(action.payload)\n    //   },\n    //   prepare: (title, content, userId) => {\n    //     return {\n    //       payload: {\n    //         id: nanoid(),\n    //         title,\n    //         content,\n    //         date: new Date().toISOString(),\n    //         user: userId,\n    //         reactions: {\n    //           thumbsUp: '0',\n    //           hooray: '0',\n    //           heart: '0',\n    //           rocket: '0',\n    //           eyes: '0',\n    //         },\n    //       },\n    //     }\n    //   },\n    // },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      const existingPost = state.posts.find((post) => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.posts.find((post) => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n  },\n  extraReducers: { \n    [fetchPosts.pending] : (state ,action) => {\n      state.status = 'loading'\n    },\n    [fetchPosts.fulfilled] : (state ,action) => {\n      state.status = 'successed'\n      state.posts = state.posts.concat(action.payload);\n    },\n    [fetchPosts.rejected] : (state ,action) => {\n      state.status = 'failed'\n      state.error = action.error.message;\n    },\n    [addNewPost.fulfilled]: (state, action) => {\n      // We can directly add the new post object to our posts array\n      state.posts.push(action.payload)\n    }\n  }\n\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\nexport default postsSlice.reducer\n\nexport const selectAllPosts = (state) => state.posts.posts;\n\nexport const selectPostById = (state, postId) =>\n  state.posts.posts.find((post) => post.id === postId)\n\n\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { reactionAdded } from './postsSlice'\n\nconst reactionEmoji = {\n    thumbsUp: '👍',\n    hooray: '🎉',\n    heart: '❤️',\n    rocket: '🚀',\n    eyes: '👀',\n  }\n\nexport const ReactionButtons = ({ post }) => {\n  const dispatch = useDispatch();\n\n  \n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\n    return (\n      <button\n        key={name}\n        type=\"button\"\n        className=\"muted-button reaction-button\"\n        onClick={() =>\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\n        }\n      >\n        {emoji} {post.reactions[name]}\n      </button>\n    )\n  })\n\n  return <div>{reactionButtons}</div>\n}\n","import React,{useEffect} from 'react'\nimport { useSelector , useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport {PostAuthor} from './PostAuthor';\nimport {TimeAgo} from './TimeAgo';\nimport {ReactionButtons} from './ReactionButtons';\nimport {selectAllPosts} from './postsSlice'\nimport {fetchPosts} from './postsSlice'\nexport const PostsList = () => {\n  const posts = useSelector(selectAllPosts)\n  const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date))\n  const dispatch = useDispatch();\n  const postStatus = useSelector(state => state.posts.status);\n  const postError = useSelector(state => state.posts.error);\n  useEffect(() =>{\n    if(postStatus === 'idle')\n    {\n      dispatch(fetchPosts());\n    }\n\n  },[postStatus,dispatch])\n  const renderedPosts = orderedPosts.map((item) => (\n    <article className=\"post-excerpt\" key={item.id}>\n      <h3>{item.title}</h3>\n      <p>{item.content.substring(0, 50)}</p>\n     \n      <div> <PostAuthor userId={item.user}/>\n      <TimeAgo timestamp={item.date}></TimeAgo></div>\n      <Link to={`/posts/${item.id}`} className=\"button muted-button\">\n        View Post\n      </Link>\n      <ReactionButtons post={item}></ReactionButtons>\n    </article>\n  ))\n  let content;\n  if(postStatus === 'loading')\n  {\n    content = <div> loading... </div>\n  }\n  else if(postStatus === 'successed')\n  {\n    const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date))\n    content = orderedPosts.map((item) => (\n      <article className=\"post-excerpt\" key={item.id}>\n        <h3>{item.title}</h3>\n        <p>{item.content.substring(0, 50)}</p>\n       \n        <div> <PostAuthor userId={item.user}/>\n        <TimeAgo timestamp={item.date}></TimeAgo></div>\n        <Link to={`/posts/${item.id}`} className=\"button muted-button\">\n          View Post\n        </Link>\n        <ReactionButtons post={item}></ReactionButtons>\n      </article> ))\n  }\n  return (\n    <section>\n      <h2>Posts</h2>\n      {content}\n    </section>\n  )\n}\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { unwrapResult } from '@reduxjs/toolkit'\n\nimport { addNewPost } from './postsSlice'\n\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n  const [userId, setUserId] = useState('')\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\n  const dispatch = useDispatch()\n\n  const onTitleChanged = (e) => setTitle(e.target.value)\n  const onContentChanged = (e) => setContent(e.target.value)\n  const users = useSelector((state) => state.users)\n  const onAuthorChanged = (e) => setUserId(e.target.value)\n\n  const canSave =\n    [title, content, userId].every(Boolean) && addRequestStatus === 'idle'\n\n  const onSavePostClicked = async () => {\n    if (canSave) {\n      try {\n        setAddRequestStatus('pending')\n        const resultAction = await dispatch(\n          addNewPost({ title, content, user: userId })\n        )\n        unwrapResult(resultAction) // resultAction sonuclanmasını beklemek\n        setTitle('')\n        setContent('')\n        setUserId('')\n      } catch (err) {\n        console.error('Failed to save the post: ', err)\n      } finally {\n        setAddRequestStatus('idle')\n      }\n    }\n  }\n  const usersOptions = users.map((user) => (\n    <option key={user.id} value={user.id}>\n      {user.name}\n    </option>\n  ))\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postAuthor\">Author:</label>\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n          <option value=\"\"></option>\n          {usersOptions}\n        </select>\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\n          Save Post\n        </button>\n      </form>\n    </section>\n  )\n}\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nexport const fetchNotifications = createAsyncThunk(\n  'notifications/fetchNotifications',\n  async (_, { getState }) => {\n    const allNotifications = selectAllNotifications(getState())\n    const [latestNotification] = allNotifications\n    const latestTimestamp = latestNotification ? latestNotification.date : ''\n    const response = await client.get(\n      `/fakeApi/notifications?since=${latestTimestamp}`\n    )\n    return response.notifications\n  }\n)\n\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: [],\n  reducers: {allNotificationsRead(state, action) {\n    state.forEach(notification => {\n      notification.read = true\n    })\n  }},\n  extraReducers: {\n    [fetchNotifications.fulfilled]: (state, action) => {\n        state.forEach(notification => {\n            // Any notifications we've read are no longer new\n            notification.isNew = !notification.read\n          })\n       state.push(...action.payload)\n      // Sort with newest first\n      state.sort((a, b) => b.date.localeCompare(a.date))\n    },\n  },\n})\nexport const { allNotificationsRead } = notificationsSlice.actions\nexport default notificationsSlice.reducer\n\nexport const selectAllNotifications = (state) => state.notifications\n","import React from 'react'\nimport { useDispatch,useSelector } from 'react-redux'\nimport { fetchNotifications ,   selectAllNotifications\n} from '../features/notifications/notificationsSlice'\n\nimport { Link } from 'react-router-dom'\nexport const Navbar = () => {\n  const dispatch = useDispatch()\n  const notifications = useSelector(selectAllNotifications)\n  const numUnreadNotifications = notifications.filter(n => !n.read).length\n  // omit component contents\n  let unreadNotificationsBadge\n\n  if (numUnreadNotifications > 0) {\n    unreadNotificationsBadge = (\n      <span className=\"badge\">{numUnreadNotifications}</span>\n    )\n  }\n  const fetchNewNotifications = () => {\n    dispatch(fetchNotifications())\n  }\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n      \n            <Link to=\"/\">Posts</Link>\n            <Link to=\"/users\">Users</Link>\n            <Link to=\"/notifications\">Notifications {unreadNotificationsBadge}</Link>\n          </div>\n          <button className=\"button\" onClick={fetchNewNotifications}>\n            Refresh Notifications\n          </button>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import React from 'react'\nimport { useSelector  } from 'react-redux';\nimport { Link } from 'react-router-dom'\nimport {PostAuthor} from './PostAuthor'\nimport {TimeAgo} from './TimeAgo';\nimport {ReactionButtons} from './ReactionButtons';\nimport {selectPostById} from './postsSlice'\nexport const SinglePostPage = ({ match }) => {\n  const { postId } = match.params;\n\n  const post = useSelector( state => selectPostById(state,postId));\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    )\n  }\n\n  return (\n    <section>\n      <article className=\"post\">\n        <h2>{post.title}</h2>\n        <PostAuthor userId={post.user}/>\n        <p className=\"post-content\">{post.content}</p>\n        <TimeAgo timestamp={post.date}></TimeAgo>\n        <Link to={`/editPost/${post.id}`} className=\"button\">\n          Edit Post\n        </Link>\n        <ReactionButtons post={post}></ReactionButtons>\n      </article>\n    </section>\n  )\n}\n","import React ,{ useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nimport { postUpdated } from './postsSlice'\nimport {selectPostById} from './postsSlice'\nexport const EditPostForm = ({match}) => {\n    const { postId } = match.params\n\n  const post = useSelector(state => selectPostById(state,postId));\n\n    const [title,setTitle] = useState(post.title);\n    const [content,setContent] = useState(post.content);\n    const onTitleChanged = e => setTitle(e.target.value);\n    const onContentChanged = e => setContent(e.target.value)\n\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const onSavePostClicked = () => {\n        if (title && content) {\n            dispatch(postUpdated({ id: postId, title, content }))\n            history.push(`/posts/${postId}`)\n          }\n\n    }\n    return (\n        <section>\n      <h2>Edit Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          placeholder=\"What's on your mind?\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n      </form>\n      <button type=\"button\" onClick={onSavePostClicked}>\n        Save Post\n      </button>\n    </section>\n    )\n\n}\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst initialState = []\nexport const fetchUsers = createAsyncThunk('/users/fetchUsers', async () => {\n  const response = await client.get('/fakeApi/users')\n  return response.users\n})\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchUsers.fulfilled]: (state, action) => {\n      return action.payload\n    },\n  },\n})\n\nexport const selectAllUsers = (state) => state.users\n\nexport const selectUserById = (state, userId) =>\n  state.users.find((user) => user.id === userId)\n\nexport default usersSlice.reducer\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { selectUserById } from '../users/usersSlice'\nimport { selectAllPosts } from '../posts/postsSlice'\n\n const UserPage = ({ match }) => {\n  const { userId } = match.params\n\n  const user = useSelector(state => selectUserById(state, userId))\n\n  const postsForUser = useSelector(state => {\n    const allPosts = selectAllPosts(state)\n    return allPosts.filter(post => post.user === userId)\n  })\n\n  const postTitles = postsForUser.map(post => (\n    <li key={post.id}>\n      <Link to={`/posts/${post.id}`}>{post.title}</Link>\n    </li>\n  ))\n\n  return (\n    <section>\n      <h2>{user.name}</h2>\n\n      <ul>{postTitles}</ul>\n    </section>\n  )\n}\n\nexport default UserPage","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { selectAllUsers } from './usersSlice'\n\nconst UsersList = () => {\n    const users = useSelector(selectAllUsers)\n    const renderedUsers = users.map(user => (\n        <li key={user.id}>\n          <Link to={`/users/${user.id}`}>{user.name}</Link>\n        </li>\n      ))\n    return (\n        <div>\n             <section>\n      <h2>Users</h2>\n\n      <ul>{renderedUsers}</ul>\n    </section>\n        </div>\n    )\n}\n\nexport default UsersList\n\n\n\n","import React,{useEffect} from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { formatDistanceToNow, parseISO } from 'date-fns'\nimport classnames from 'classnames'\nimport { selectAllUsers } from '../users/usersSlice'\n\nimport {\n  selectAllNotifications,\n  allNotificationsRead,\n} from './notificationsSlice'\n\nexport const NotificationsList = () => {\n  const dispatch = useDispatch()\n  const notifications = useSelector(selectAllNotifications)\n  const users = useSelector(selectAllUsers)\n  useEffect(() => {\n    dispatch(allNotificationsRead())\n  })  \n  const renderedNotifications = notifications.map((notification) => {\n    const date = parseISO(notification.date)\n    const timeAgo = formatDistanceToNow(date)\n    const user = users.find((user) => user.id === notification.user) || {\n      name: 'Unknown User',\n    }\n    const notificationClassname = classnames('notification', {\n        new: notification.isNew\n      })\n    return (\n      <div key={notification.id} className={notificationClassname}>\n        <div>\n          <b>{user.name}</b> {notification.message}\n        </div>\n        <div title={notification.date}>\n          <i>{timeAgo} ago</i>\n        </div>\n      </div>\n    )\n  })\n\n  return (\n    <section className=\"notificationsList\">\n      <h2>Notifications</h2>\n      {renderedNotifications}\n    </section>\n  )\n}\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\nimport { PostsList } from './features/posts/PostsList';\nimport {AddPostForm} from './features/posts/AddPostForm';\nimport { Navbar } from './app/Navbar'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\nimport { EditPostForm } from './features/posts/EditPostForm'\nimport UserPage from './features/users/UserPage';\nimport UsersList from './features/users/UsersList';\nimport { NotificationsList } from './features/notifications/NotificationsList'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <>\n              <AddPostForm></AddPostForm>\n              <PostsList></PostsList>\n              </>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route  path=\"/editPost/:postId\" component={EditPostForm} />\n          <Route exact path=\"/users\" component={UsersList} />\n          <Route exact path=\"/users/:userId\" component={UserPage} />\n          <Route exact path=\"/notifications\" component={NotificationsList} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from 'miragejs'\n\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport faker from 'faker'\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\nimport { parseISO } from 'date-fns'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    this.timing = 2000  \n\n    this.resource('users')\n    this.resource('posts')\n    this.resource('comments')\n\n    const server = this\n\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n      data.date = new Date().toISOString()\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId)\n      data.user = user\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!')\n      }\n\n      const result = server.create('post', data)\n      return result\n    })\n\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId)\n      return post.comments\n    })\n\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5)\n\n      let pastDate\n\n      const now = new Date()\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since)\n      } else {\n        pastDate = new Date(now.valueOf())\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users)\n        const template = randomFromArray(notificationTemplates)\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        }\n      })\n\n      return { notifications }\n    })\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      firstName() {\n        return faker.name.firstName()\n      },\n      lastName() {\n        return faker.name.lastName()\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName)\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName)\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, { user })\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      title() {\n        return sentence()\n      },\n      date() {\n        return faker.date.recent(7)\n      },\n      content() {\n        return article(1)\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        }\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      date() {\n        return faker.date.past(2)\n      },\n      text() {\n        return paragraph()\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('user', 3)\n  },\n})\n","import { configureStore } from '@reduxjs/toolkit'\nimport postsReducer from \"../features/posts/postsSlice\";\nimport usersReducer from \"../features/users/usersSlice\"\nimport notificationsReducer from \"../features/notifications/notificationsSlice\"\nexport default configureStore({\n  reducer:{\n    posts:postsReducer,\n    users:usersReducer,\n    notifications:notificationsReducer,\n\n  }\n})\n\n//Global redux store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\nimport {fetchUsers} from './features/users/usersSlice';\nimport './api/server'\n\n\nstore.dispatch(fetchUsers());\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}